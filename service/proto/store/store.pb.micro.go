// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: store.proto

package store

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/anypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Store service

func NewStoreEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Store service

type StoreService interface {
	All(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Set(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	StartTX(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	CommitTX(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetTX(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	SetTX(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type storeService struct {
	c    client.Client
	name string
}

func NewStoreService(name string, c client.Client) StoreService {
	return &storeService{
		c:    c,
		name: name,
	}
}

func (c *storeService) All(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Store.All", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Store.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) Set(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Store.Set", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) StartTX(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Store.StartTX", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) CommitTX(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Store.CommitTX", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) GetTX(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Store.GetTX", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) SetTX(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Store.SetTX", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Store service

type StoreHandler interface {
	All(context.Context, *Request, *Response) error
	Get(context.Context, *Request, *Response) error
	Set(context.Context, *Request, *Response) error
	StartTX(context.Context, *Request, *Response) error
	CommitTX(context.Context, *Request, *Response) error
	GetTX(context.Context, *Request, *Response) error
	SetTX(context.Context, *Request, *Response) error
}

func RegisterStoreHandler(s server.Server, hdlr StoreHandler, opts ...server.HandlerOption) error {
	type store interface {
		All(ctx context.Context, in *Request, out *Response) error
		Get(ctx context.Context, in *Request, out *Response) error
		Set(ctx context.Context, in *Request, out *Response) error
		StartTX(ctx context.Context, in *Request, out *Response) error
		CommitTX(ctx context.Context, in *Request, out *Response) error
		GetTX(ctx context.Context, in *Request, out *Response) error
		SetTX(ctx context.Context, in *Request, out *Response) error
	}
	type Store struct {
		store
	}
	h := &storeHandler{hdlr}
	return s.Handle(s.NewHandler(&Store{h}, opts...))
}

type storeHandler struct {
	StoreHandler
}

func (h *storeHandler) All(ctx context.Context, in *Request, out *Response) error {
	return h.StoreHandler.All(ctx, in, out)
}

func (h *storeHandler) Get(ctx context.Context, in *Request, out *Response) error {
	return h.StoreHandler.Get(ctx, in, out)
}

func (h *storeHandler) Set(ctx context.Context, in *Request, out *Response) error {
	return h.StoreHandler.Set(ctx, in, out)
}

func (h *storeHandler) StartTX(ctx context.Context, in *Request, out *Response) error {
	return h.StoreHandler.StartTX(ctx, in, out)
}

func (h *storeHandler) CommitTX(ctx context.Context, in *Request, out *Response) error {
	return h.StoreHandler.CommitTX(ctx, in, out)
}

func (h *storeHandler) GetTX(ctx context.Context, in *Request, out *Response) error {
	return h.StoreHandler.GetTX(ctx, in, out)
}

func (h *storeHandler) SetTX(ctx context.Context, in *Request, out *Response) error {
	return h.StoreHandler.SetTX(ctx, in, out)
}
